<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thinks on Diamondu</title>
    <link>https://wuhang-du.github.io/tags/thinks/</link>
    <description>Recent content in Thinks on Diamondu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Aug 2017 08:36:54 +0000</lastBuildDate>
    
	<atom:link href="https://wuhang-du.github.io/tags/thinks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>技能的反面</title>
      <link>https://wuhang-du.github.io/post/2017-08-12-%E6%8A%80%E8%83%BD%E7%9A%84%E5%8F%8D%E9%9D%A2/</link>
      <pubDate>Sat, 12 Aug 2017 08:36:54 +0000</pubDate>
      
      <guid>https://wuhang-du.github.io/post/2017-08-12-%E6%8A%80%E8%83%BD%E7%9A%84%E5%8F%8D%E9%9D%A2/</guid>
      <description>介绍 这篇博客是技能的反面 - 魔方和模仿以及The Psychology of Cross Country的读后感。
这些文章通过对学习本身的一些思考，让我们能够更加高效的去获取技能。我想做的就是去获取这些文章后面的“渔”，而不是简简单单地得到“鱼”。
整篇文章我将以游泳为例来说明，就像Bill Buxton以骑马为例一样。
技能与解决问题有什么区别 技能的定义就是：即Automatic,可以无意识的自动去做某件事。我现在可以浮在水面而不用去考虑我是怎么实现的。
解决问题：即Attentive Behaviour，是说做某件事的时候需要考虑很多东西。例如我最近在学习自由泳的打腿与划手的配合，在游的过程中，既要考虑腿的节奏，又需要考虑手的动作。
但是浮在水面却不是我需要考虑的，因为这已经是我的一个技能，skilled。
练习的魔力 在获取某件技能的时候，一条最重要的法则就是：不断的练习，&amp;rdquo;do it over and over and over again, then do it some more&amp;rdquo;，直到它变成一项技能。
干扰 就像我自己提到的大腿的手脚配合，单独的打腿与单独的划手我是可以完成的，但是同时做这两件事情，这两件事就会互相干扰。
总结 为了获取某项技能，把某件事情由解决问题变成一项技能，一共有以下几点：
 1.练习，不断的练习。
 2.预案。预案的含义是对于突发情况做出准备计划。这样，当突发情况出现时，不至于手足无措。同时，能够减少精力的分散，这样对整个大局的影响最小。
 3.速度。只需要降低约10%的速度，就可以解决在过程中遇到的问题，以便更加平稳的进入下一个阶段。换言之，如果，操之过急，速度增加10%，那么就会面临只能解决一半问题的窘境。
  应用 这几天结合我的学习，发现还是很有用的。文中提到的论文，我前后一共阅读了3遍。
分析一下，读懂文章，需要
 1.理解单词的意思， 2.理解语法， 3.思考作者的思想
 这几个技能。然而这些都不是我的技能。第一遍的时候，这几个点互相影响，同时追求速度，因此无法读懂内容。第二遍的时候，无意运用了预案和速度的观点，延长了思考作者思想的时间即读文章的时间，在过程中查词，理解语法，虽然速度慢，但是效果很好，花了30分钟左右，但是真的读懂了。第三遍即不断的练习，以便有更深刻的理解。
如果是听英语呢？ 首先就是要多听，多读，即观点1。第二在听和读的过程中遇到不会的单词，句子怎么办，第三就是心别急，查完单词，理解完语法。也就是说把单词的含义以及语法Automatic之后，继续进入下一个阶段的问题解决。
如果是敲代码呢？ 首先就是要多写，多做。第二就是如果在过程中遇到突发状况如何处理？应该停下来，解决问题，而不是改一下一遍又一遍的重复测试。第三就是要心别急，拉长解决问题的时间，把当前的问题解决掉，再进入下一个阶段。另外的一个体会就是阶段，如果不懂一个语言的语法，也就无法进行架构的设计。因为在实现的过程中，一直在解决各种神奇的小问题。因此对于底层的问题，先解决掉，变成技能之后，再进入高层次的问题解决。
如果是游泳呢？ 首先就是要多练习，分别练习打腿和转身和手的动作。预案就是当同时进行，互相影响的时候，停下来继续练单个动作。速度的观点就是游慢点。哈哈。</description>
    </item>
    
  </channel>
</rss>