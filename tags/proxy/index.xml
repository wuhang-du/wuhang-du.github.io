<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Proxy on Diamondu</title>
    <link>https://wuhang-du.github.io/tags/proxy/</link>
    <description>Recent content in Proxy on Diamondu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Jun 2017 08:36:54 +0000</lastBuildDate>
    
	<atom:link href="https://wuhang-du.github.io/tags/proxy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go：ReverProxy.Go 代码理解</title>
      <link>https://wuhang-du.github.io/post/2017-06-19-reverproxy.go-%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3/</link>
      <pubDate>Mon, 19 Jun 2017 08:36:54 +0000</pubDate>
      
      <guid>https://wuhang-du.github.io/post/2017-06-19-reverproxy.go-%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3/</guid>
      <description>对使用GO语言实现反向代理的几种技术的理解与分析
 Talk is cheap, I will show you the code.
通过阅读代码，一共看到了几种实现代理的方法
 io.copy
 http.Client
 reverseProxy
   package httputil import ( &amp;quot;context&amp;quot; &amp;quot;io&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;net/url&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) var onExitFlushLoop func() //函数式编程的写法 //这是一个结构体，可继承 type ReverseProxy struct { Director func(*http.Request) // If nil, http.DefaultTransport is used. // RoundTripper是一种类型，&amp;amp;Transport Transport http.RoundTripper // FlushInterval specifies the flush interval // to flush to the client while copying the // response body.</description>
    </item>
    
    <item>
      <title>从零开始用Go写代理</title>
      <link>https://wuhang-du.github.io/post/2017-06-15-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8go%E5%86%99%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 15 Jun 2017 08:36:54 +0000</pubDate>
      
      <guid>https://wuhang-du.github.io/post/2017-06-15-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8go%E5%86%99%E4%BB%A3%E7%90%86/</guid>
      <description>学习一门语言还是需要理论与实践相结合的，于是决定开始利用Go语言实现Proxy的功能。
 1.需求分析   实现http协议的代理。 高性能，高并发。   大概写一个排期吧
6-16 &amp;ndash; 6-23 把基本的架子搭起来，实现访问代理，代理返回后台的数据。
6-23 &amp;ndash; 6-30 查看理论，进一步分析现有的功能，对第一期的代码重构。
2.理论分析 想到了自己比较常用的几款proxy。查了查，简单分析下：
 Nginx, Haproxy 反向代理：  Client &amp;lt;&amp;ndash; &amp;ndash;&amp;gt; Nginx, Haproxy &amp;lt;&amp;ndash; &amp;ndash;&amp;gt; Server
 ShadowSocks  Client &amp;lt;&amp;ndash; &amp;ndash;&amp;gt; (local ss client) &amp;lt;&amp;ndash; &amp;ndash;&amp;gt; (remote ss server) &amp;lt;&amp;ndash; &amp;ndash;&amp;gt; server
我的目标是实现诸如Nginx与Haproxy的反向代理。
从配置文件中可以看出，将请求导入到代理之后，根据host名以及url来做导向。
刚才想到一点，可以不解析body，根据head就可以确定导向。
3. 实践部分 6.16 完成了初步的框架。一个请求可以转接。
有一个问题： 问题背景： server: 监听8081端口，有请求时返回字符串 &amp;quot;hello&amp;quot; proxy: 监听8080端口，外界的请求到达时，启动go程，go程内去构建新的请求，去8081访问，并写结果。 client: 采用wrk模式，并发1000个。 报错： go程内client.do函数： error: Get http://192.</description>
    </item>
    
  </channel>
</rss>