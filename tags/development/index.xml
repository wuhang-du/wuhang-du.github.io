<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Diamondu</title>
    <link>https://wuhang-du.github.io/tags/development/</link>
    <description>Recent content in Development on Diamondu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Aug 2017 08:36:54 +0000</lastBuildDate>
    
	<atom:link href="https://wuhang-du.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux性能分析与监测</title>
      <link>https://wuhang-du.github.io/post/2017-08-19-linux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E7%9B%91%E6%B5%8B/</link>
      <pubDate>Sat, 19 Aug 2017 08:36:54 +0000</pubDate>
      
      <guid>https://wuhang-du.github.io/post/2017-08-19-linux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E7%9B%91%E6%B5%8B/</guid>
      <description>介绍 系统的性能分析对于性能提升来说，是一个缓慢，复杂的过程。生产环境一般都是类Linux系统，对于一个系统的性能监控，主要从CPU性能，内存管理，文件IO，网络IO这几个主要的方面进行。
1.CPU与内存相关 CPU是整个计算机的处理核心，大脑。如果内核调度程序是管家的话，CPU就是在车间里一直干活的工人。它需要处理各种突发的事件（中断）；它需要雨露均沾，让每个进程都不受冷落（时间片，上下文切换）；鉴于车间的空间有限，有些重要的生产资料一直在手边，其他的资料有空间就继续使，没有就得放隔壁专用车间（内存与交换区）。我们需要做的就是监控上述行为，以便了解车间的现状。
测试场景：4核Centos 7, 使用go监听8080端口，对请求不做处理，立即返回&amp;rdquo;Hello World&amp;rdquo;,使用wrk -t4 -c800 来访问。
vmstat 1 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 7 0 0 1644432 9460 1452656 0 0 0 82 9345 9853 37 54 9 0 0 8 0 0 1644592 9460 1452656 0 0 0 0 8789 9478 39 53 8 0 0 9 0 0 1644432 9460 1452656 0 0 0 0 10070 11192 35 56 9 0 0 8 0 0 1644352 9460 1452656 0 0 0 0 7861 7467 40 54 7 0 0 Procs: r: The number of runnable processes (running or waiting for run time) b: The number of processes in uninterruptible sleep.</description>
    </item>
    
    <item>
      <title>我的Git之旅</title>
      <link>https://wuhang-du.github.io/post/2017-07-26-%E6%88%91%E7%9A%84git%E4%B9%8B%E6%97%85/</link>
      <pubDate>Wed, 26 Jul 2017 08:36:54 +0000</pubDate>
      
      <guid>https://wuhang-du.github.io/post/2017-07-26-%E6%88%91%E7%9A%84git%E4%B9%8B%E6%97%85/</guid>
      <description>echo &amp;quot;你好, Git!&amp;quot;;  git remote 命令，定义远端的主机。这个远端，可以是另外一台机器，最常用的就是github
使用git remote -v 就可以显示本地当前仓库的远程主机。
 git remote add [name] [url] example: git remote add origin https://github.com/wuhang-du/leetcode 远端仓库在远端 example: git remote add origin1 ../git-test 远端仓库在本地  git merge 命令，即合并，主要提一下 &amp;ndash;no-ff的使用。
示例当前的分支是：master。develop分支以master分支作为基准分支，增加了新的内容。
调用操作之后使用tig 查看当前的状态：
git merge develop 2017-07-26 11:32 du [develop] [master] Merge branch &#39;develop&#39; 结果：master指向了develop,变成了新的master.此时master与 develop 状态相同。 git merge develop --no-ff 2017-07-26 11:32 du M [master] Merge branch &#39;develop&#39; | 2017-07-26 11:31 du | o [develop] test | 2017-07-26 11:28 du M update 结果：master与develop合并，生成了新的master,此状态超前 develop 一次。  git pull 是从远程主机拉取变化，并更新本地的命令。</description>
    </item>
    
    <item>
      <title>wrk压测工具简析</title>
      <link>https://wuhang-du.github.io/post/2017-05-12-start-wrk/</link>
      <pubDate>Fri, 12 May 2017 08:36:54 +0000</pubDate>
      
      <guid>https://wuhang-du.github.io/post/2017-05-12-start-wrk/</guid>
      <description>Wrk是一款高性能的基于Linux平台的压测工具。
 1.基础功能 命令是：
wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html -t : 线程数 -c : http连接总数。 -d : 测试时长。 -s : lua脚本参数  2.简单分析 wrk主要是
  基于redis的ae模块, 提供异步框架。 nginx的httpparser, 提供http的请求解析。 lua脚本，利用Lua的创建更复杂的测试用例。   3.简单使用 Http压测工具wrk使用指南
wrk &amp;ndash; 小巧轻盈的 http 性能测试工具.
4.Update:2017-10-12 又重新捡了起来，附上一个比较完整的脚本。
 -- 全局环境内执行的代码 local counter = 1 --全局的counter local threads = {} --全局的threads dofile(&amp;quot;./token.lua&amp;quot;) wrk.method = &amp;quot;GET&amp;quot; --修改了全局的wrk参数。 function setup(thread) --setup函数，各个thread分开执行前，执行。 thread:set(&amp;quot;id&amp;quot;, counter) table.insert(threads, thread) counter = counter + 1 end -- 各个thread内执行的函数 function init(args) --每一个thread 各自一个独立的 lua环境。 requests = 0 responses = 0 local msg = &amp;quot;thread %d created&amp;quot; print(msg:format(id)) path = &amp;quot;/redeem/mobile/Controller/Handler.</description>
    </item>
    
    <item>
      <title>开始技术博客</title>
      <link>https://wuhang-du.github.io/post/2017-05-11-first/</link>
      <pubDate>Mon, 01 May 2017 08:36:54 +0000</pubDate>
      
      <guid>https://wuhang-du.github.io/post/2017-05-11-first/</guid>
      <description>第一版：2017-5-1
我的第一篇 github 博客, 本博客使用 jekyll + bootstrap 搭建!
感谢 github 提供的 Github Pages 功能!
第二版：2017-7-27
使用Hugo搭建，基于hyde
借鉴了rakyll的css.
独立添加了tags的功能。
echo &amp;quot;你好, Github Pages!&amp;quot;;  </description>
    </item>
    
  </channel>
</rss>